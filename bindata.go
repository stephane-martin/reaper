// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static/stream.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticStreamHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xdc\x36\x10\xbd\xef\xaf\x98\xb0\x28\xb2\x86\x51\xc9\x46\x3f\x0e\x6b\x49\x40\xeb\x06\x48\x81\x14\x2d\x60\x03\x45\x90\xe6\xc0\x15\x67\x25\x36\x14\x47\x20\x29\xad\xb7\x81\xff\x7b\x41\x7d\x4b\xd6\x3a\x29\xac\xc3\xae\x34\x7c\x9c\x79\x6f\x38\xe4\x30\x7a\xf5\xeb\x1f\xb7\xf7\xef\xff\x7c\x03\xb9\x2b\x54\xb2\x89\xfc\x1f\x28\xae\xb3\x98\xa1\x66\xc9\x66\x13\xe5\xc8\x45\xb2\xd9\x00\x00\x44\x4e\x3a\x85\xc9\xcf\x69\x8a\xd6\x82\xa2\xcc\x82\x75\x06\x79\x21\x75\x16\x85\xed\x60\x87\xb4\xa9\x91\xa5\x03\x77\x2a\x31\x66\x0e\x1f\x5c\xf8\x0f\xaf\x79\x6b\x65\x49\x83\x39\x4a\x2d\xe8\x18\x90\x56\xc4\x05\xc4\x70\xa8\x74\xea\x24\x69\xd8\x5e\xc0\xe7\x06\xe1\x9f\x9a\x1b\x48\x49\xeb\x9b\x99\xa5\xb0\x19\xc4\x20\x28\xad\x0a\xd4\x2e\xc8\xd0\xbd\x51\xe8\x5f\x7f\x39\xfd\x26\xb6\xac\xb0\x19\xbb\x98\xcf\x50\xf4\xec\x0c\x45\xcd\x8c\x61\xca\x40\x86\x97\x25\x6a\xf1\x8e\xb2\xad\x74\x58\x4c\x99\xf5\x9e\x05\xdd\xa5\x86\x94\x82\xd8\x07\x09\x6c\xf3\x71\x4f\x25\x24\x93\xef\xb7\x28\xb3\xdc\xc1\x77\x8d\x29\x55\x12\xb5\x1b\x4c\xd7\x37\x33\x9f\x1e\xd1\x46\xbd\xcd\xa5\x12\x6d\xdc\x39\x44\x1e\x60\xdb\x87\x5d\x52\xea\x5d\x8c\x3c\xe2\xaf\xe1\x31\x0f\xf0\xb8\x19\xdf\x86\xd7\xb3\xc9\x3b\x90\x29\xd8\x45\x40\xda\x56\xfb\x42\xba\xb3\x6b\xd9\x53\x7f\xe5\x17\x74\x8d\xb7\x41\x57\x19\x0d\x07\xae\x2c\x9e\x23\x34\x38\x29\x6c\x16\xd4\x5c\x55\xf8\x12\x4f\x9e\x49\x60\x51\x8b\xed\xe8\x6e\x8e\x1f\xec\x10\x03\x63\xf3\xb1\xf5\x28\x8f\x93\x3a\xf2\x4c\xdb\x42\xff\xc0\xfe\xc2\xfd\x1d\xa5\x9f\xd0\xb1\x8f\x4b\xca\x9e\x06\xc4\xa0\xf1\x08\x03\x6a\xcb\x8e\x76\x17\x86\x0c\x2e\xc7\xcc\x2b\x4a\xb9\xcf\x6b\x90\x93\x75\x70\x09\x2c\x6c\x37\x20\x5b\x90\x6e\x64\x91\x4e\x15\x59\x9c\x2d\x07\xd6\x6e\x2d\x5d\xbe\x8e\x7d\x9d\x4d\xb7\x48\x6a\x90\x3b\xec\x16\x7a\xcb\x84\xac\x97\x51\x1a\x81\x0e\x8b\x40\x6a\x8d\xe6\xed\xfd\xef\xef\x7c\x8e\xa2\x7d\x72\x4b\x5a\x63\x1b\xb1\xa1\x20\x82\x28\xdc\x27\xec\xe9\xec\xc5\xee\x5a\xac\xd4\xaa\xa6\x02\xad\xe5\xd9\x57\xab\xea\xe0\x16\x62\xc0\xda\x05\x82\x3b\x1e\xd8\x52\x49\xb7\x7d\xfd\xb7\x7e\xbd\x22\xe8\x40\x06\xb6\x4d\x3e\x20\x86\xab\x1b\x90\x10\x0d\x4e\x02\x85\x3a\x73\xf9\x0d\xc8\xcb\xcb\xb5\x80\x2f\x4b\xe5\x3c\x9d\xf7\xf8\xe0\x77\x52\x1f\xfa\x83\xfc\xb8\x3e\xe3\xd9\x14\xc2\x93\x82\x9f\x24\xf5\x11\x50\x59\x5c\x39\xd1\xfe\x3f\xfd\xd5\x2a\x78\x4f\x95\x81\xbd\xa1\xa3\x45\x7f\x4a\xa2\x05\x4d\x0e\x6c\x55\x96\x64\xdc\x58\xe7\x76\xad\x38\xce\xaa\x6a\xd5\xf4\x5b\x2c\x0a\xdb\x96\x32\xb4\x1d\x77\x52\x38\xed\x3a\xa9\xb5\x5d\xbb\x69\x3a\xdb\xa8\x95\x6a\x34\x07\x45\xc7\x1d\xe4\x52\x08\xec\xfa\x4b\x77\xda\xed\x49\x9c\xbe\x88\xf5\x4f\xc9\x85\x90\x3a\xdb\xc1\xd5\x68\x2b\xb8\xc9\xa4\x9e\x99\x8e\x52\xb8\x7c\x07\xd7\x57\x57\xdf\x8e\xc6\xbc\x39\x77\x97\xd6\x3d\x4f\x3f\x65\x86\x2a\x2d\x76\x90\x19\x7e\x9a\xf1\xfa\xc6\x77\xb1\xcf\xab\xd8\x63\x2e\x1d\x3e\x4b\x62\xe4\x1a\xfc\x88\xc5\xd3\xdf\x09\x92\xac\xf4\x1b\x6b\x07\x7c\x6f\x49\x55\x53\xc7\x8e\xca\xdd\x12\xaf\xf0\xe0\x9e\x18\x4d\xab\x6e\x61\xdd\x93\x73\x54\xec\xe0\xfb\xa9\x71\xcc\x2f\xaf\x1c\xcd\x15\xfb\xde\x32\x91\x3c\x8a\xe8\xa9\x2f\x23\xac\x29\x7f\x46\x4f\x4f\xe8\x7a\x45\x50\xf9\xf0\x85\x25\x3c\x57\x44\x5d\x69\xfa\x62\x4c\x36\x51\xd8\x5d\xa1\x22\x5f\x56\x6d\x31\x46\x42\xd6\x20\x45\xdc\xdc\x3b\x92\x28\x14\xb2\xee\x06\x1a\xbd\x7e\xa4\x69\xaa\xc9\x10\x2a\x92\xba\xac\xfa\x0b\x55\xdb\x67\x19\x34\x7d\x29\x66\x77\xa8\x05\x83\xf0\x0c\xd8\xef\x03\xd6\xb8\xf4\xd7\x22\xb0\xf2\x5f\x8c\xd9\x4f\x3f\xb0\x0e\x1f\x85\x3e\x92\xa7\xd9\xd2\xf3\x7c\x9b\xbb\xe0\x7f\x01\x00\x00\xff\xff\xb9\xe7\x35\x64\x1c\x0a\x00\x00")

func staticStreamHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticStreamHtml,
		"static/stream.html",
	)
}

func staticStreamHtml() (*asset, error) {
	bytes, err := staticStreamHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/stream.html", size: 2588, mode: os.FileMode(420), modTime: time.Unix(1548341748, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/stream.html": staticStreamHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"stream.html": &bintree{staticStreamHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
